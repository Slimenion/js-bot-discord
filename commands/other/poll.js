const { Command } = require('discord.js-commando');
const { MessageEmbed } = require('discord.js');

module.exports = class PollCommand extends Command {
  constructor(client) {
    super(client, {
      name: 'poll',
      group: 'other',
      memberName: 'poll',
      description: '–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å —Å 10 –≤—ã–±–æ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.',
      args: [
        {
          key: 'question',
          prompt: '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?',
          type: 'string',
          validate: function validateQuestion(question) {
            if (question.length < 101 && question.length > 11) return true;
            return '–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–ª–∏–Ω—É –æ—Ç 10 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.';
          }
        },
        {
          key: 'options',
          prompt: '–ö–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?',
          type: 'string',
          validate: function validateOptions(options) {
            var optionsList = options.split(',');
            if (optionsList.length > 1) return true;
            return '–ß—Ç–æ –†–æ—Å—Å–∏—è —Å–∏–ª—å–Ω–æ –¥–∞–≤–∏—Ç? –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ.';
          }
        },
        {
          key: 'time',
          prompt: '–ö–∞–∫ –¥–æ–ª–≥–æ –¥–æ–ª–∂–µ–Ω –¥–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç–∞—Ö?',
          type: 'integer',
          default: 0,
          validate: function validateTime(time) {
            if (time >= 0 && time <= 60) return true;
            return '–ù–∞–ø–∏—à–∏ –æ—Ç 0 –¥–æ 60.';
          }
        }
      ]
    });
  }

  run(msg, { question, options, time }) {
    var emojiList = [
      '1‚É£',
      '2‚É£',
      '3‚É£',
      '4‚É£',
      '5‚É£',
      '6‚É£',
      '7‚É£',
      '8‚É£',
      '9‚É£',
      'üîü'
    ];
    var optionsList = options.split(',');

    var optionsText = '';
    for (var i = 0; i < optionsList.length; i++) {
      optionsText += emojiList[i] + ' ' + optionsList[i] + '\n';
    }

    var embed = new MessageEmbed()
      .setTitle(':ballot_box: ' + question)
      .setDescription(optionsText)
      .setAuthor(msg.author.username, msg.author.displayAvatarURL())
      .setColor(`#FF0000`)
      .setTimestamp();

    if (time) {
      embed.setFooter(`–û–ø—Ä–æ—Å –Ω–∞—á–∞–ª—Å—è –∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è ${time} –º–∏–Ω—É—Ç`);
    } else {
      embed.setFooter(`–û–ø—Ä–æ—Å –Ω–∞—á–∞–ª—Å—è –∏ –Ω–µ –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è`);
    }

    msg.delete(); // Remove the user's command message

    msg.channel
      .send({ embed }) // Definitely use a 2d array here..
      .then(async function(message) {
        var reactionArray = [];
        for (var i = 0; i < optionsList.length; i++) {
          reactionArray[i] = await message.react(emojiList[i]);
        }

        if (time) {
          setTimeout(() => {
            // Re-fetch the message and get reaction counts
            message.channel.messages
              .fetch(message.id)
              .then(async function(message) {
                var reactionCountsArray = [];
                for (var i = 0; i < optionsList.length; i++) {
                  reactionCountsArray[i] =
                    message.reactions.cache.get(emojiList[i]).count - 1;
                }

                // Find winner(s)
                var max = -Infinity,
                  indexMax = [];
                for (let i = 0; i < reactionCountsArray.length; ++i)
                  if (reactionCountsArray[i] > max)
                    (max = reactionCountsArray[i]), (indexMax = [i]);
                  else if (reactionCountsArray[i] === max) indexMax.push(i);

                // Display winner(s)
                var winnersText = '';
                if (reactionCountsArray[indexMax[0]] == 0) {
                  winnersText = ':x: –ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª. –í–æ–æ–±—â–µ-—Ç–æ –∑–¥–µ—Å—å –≤–∞—à –≥–æ–ª–æ—Å —Ä–µ—à–∞–µ—Ç , –æ—Å–±–µ–Ω–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–æ—Ç–µ–≤–æ—Ä–µ—á–∏—Ç –≤–æ–ª–µ –ë–æ–≥–∞';
                } else {
                  for (let i = 0; i < indexMax.length; i++) {
                    winnersText +=
                      emojiList[indexMax[i]] +
                      ' ' +
                      optionsList[indexMax[i]] +
                      ' (' +
                      reactionCountsArray[indexMax[i]] +
                      ' –≥–æ–ª–æ—Å–æ–≤\n';
                  }
                }

                embed.addField(':crown: **–ü–æ–±–µ–∂–¥–∞–µ—Ç:**', winnersText);
                embed.setFooter(
                  `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ! –û–Ω–æ –¥–ª–∏–ª–æ—Å—å ${time} –º–∏–Ω.`
                );
                embed.setTimestamp();

                message.edit('', embed);
              });
          }, time * 60 * 1000);
        }
      })
      .catch(console.error);

    return;
  }
};
